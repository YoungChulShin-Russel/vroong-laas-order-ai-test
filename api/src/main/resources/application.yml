# ============================================
# 공통 설정
# ============================================
spring:
  profiles:
    active: local  # 기본 프로파일: local
    include: infrastructure  # Infrastructure 설정 포함
  application:
    name: order-service

server:
  port: 8080
  shutdown: graceful

management:
  tracing:
    enabled: true
    baggage:
      enabled: true
      remote-fields:
        - x-request-id
        - x-user-id
      correlation:
        enabled: true
        fields:
          - x-user-id

app:
  logging:
    exclude-patterns:
      - /actuator/**
      - /health
      - /favicon.ico

---
# ============================================
# Local 환경 (개발용 - Docker MySQL)
# ============================================
spring:
  config:
    activate:
      on-profile: local
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: none  # Flyway가 스키마 관리
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        format_sql: true     # 로컬: SQL 포맷팅
    show-sql: true           # 로컬: SQL 로그 출력

# Local DataSource (단일 DataSource)
order:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    jdbc-url: jdbc:mysql://localhost:3306/order?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul
    username: ${DB_USERNAME:order_user}
    password: ${DB_PASSWORD:order_password}
    hikari:
      pool-name: OrderLocalPool
      maximum-pool-size: 10  # 로컬: 적은 커넥션
      minimum-idle: 2
      connection-timeout: 3000
      idle-timeout: 600000
      max-lifetime: 1800000

logging:
  level:
    vroong.laas.order: DEBUG  # 로컬: 상세 로그
    org.hibernate.SQL: DEBUG

---
# ============================================
# Production 환경 (운영용 - AWS Aurora MySQL)
# ============================================
spring:
  config:
    activate:
      on-profile: prod
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: validate  # 운영: 스키마 검증만 (변경 금지)
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        format_sql: false  # 운영: SQL 포맷팅 비활성화
    show-sql: false      # 운영: SQL 로그 비활성화

# Production DataSource (Writer/Reader 분리)
order:
  datasource:
    # Writer DataSource (Aurora Writer Endpoint)
    write:
      driver-class-name: software.aws.rds.jdbc.Driver
      # AWS Advanced JDBC Wrapper URL 형식
      # wrapperPlugins: failover (빠른 Failover), efm2 (Enhanced Failure Monitoring)
      jdbc-url: jdbc:aws-wrapper:mysql://${DB_WRITER_ENDPOINT:your-cluster.cluster-xxxxx.ap-northeast-2.rds.amazonaws.com}:3306/order?wrapperPlugins=failover,efm2&connectTimeout=3000&socketTimeout=10000&useSSL=true&requireSSL=true&serverTimezone=Asia/Seoul
      username: ${DB_USERNAME}
      password: ${DB_PASSWORD}
      hikari:
        pool-name: OrderWriterPool
        maximum-pool-size: 20   # Writer: 쓰기 작업용 (적게)
        minimum-idle: 5
        connection-timeout: 3000
        idle-timeout: 600000
        max-lifetime: 1800000
        connection-init-sql: SELECT 1  # Connection 유효성 검증
    
    # Reader DataSource (Aurora Reader Endpoint)
    read:
      driver-class-name: software.aws.rds.jdbc.Driver
      # Reader Endpoint는 자동으로 Read Replica들에 로드밸런싱
      jdbc-url: jdbc:aws-wrapper:mysql://${DB_READER_ENDPOINT:your-cluster.cluster-ro-xxxxx.ap-northeast-2.rds.amazonaws.com}:3306/order?wrapperPlugins=failover,efm2&connectTimeout=3000&socketTimeout=10000&useSSL=true&requireSSL=true&serverTimezone=Asia/Seoul
      username: ${DB_USERNAME}
      password: ${DB_PASSWORD}
      hikari:
        pool-name: OrderReaderPool
        maximum-pool-size: 50   # Reader: 읽기 작업용 (많이)
        minimum-idle: 10
        connection-timeout: 3000
        idle-timeout: 600000
        max-lifetime: 1800000
        read-only: true  # 읽기 전용 설정
        connection-init-sql: SELECT 1

logging:
  level:
    vroong.laas.order: INFO  # 운영: 기본 로그만
    org.hibernate.SQL: WARN
    software.aws.rds: INFO  # AWS JDBC Wrapper 로그