---
alwaysApply: true
---

# 프로젝트 개요

## 기술 스택
- Java 25
- Spring Boot 4.0.0-M3
- Spring Data JPA
- QueryDSL
- MySQL
- Kafka
- Gradle (Multi-Module)

## 목표
- 일 30만건 이상 주문 처리
- 명확한 레이어 분리
- AI가 이해하고 수정하기 쉬운 구조

## 모듈 구조

```
order-service/
├── core/                   # 비즈니스 로직 (Spring 의존성 없음)
│   ├── domain/            # Domain Entity, Value Object, Domain Service
│   └── application/       # Use Case, Port, Command/Query, Support
├── infrastructure/         # 기술 구현
│   └── storage/
│       ├── db/            # PostgreSQL (JPA)
│       └── cache/         # Redis
├── api/                    # 고객용 API
│   ├── web/              # HTTP API
│   └── grpc/             # gRPC API
├── admin/                  # 관리자용 API
│   └── web/
└── worker/                 # 배치/스케줄러
    └── job/
```

## 의존성 방향 (중요!)

허용: api/admin/worker → infrastructure → core

금지: core → infrastructure (절대 안 됨!)

## 레이어별 책임

### Domain (core/domain/)
- 목적: 순수 비즈니스 규칙
- 허용: Java, Lombok만
- 금지: JPA, Spring, Repository, @Transactional

### Application (core/application/)
- 목적: Use Case 실행, 흐름 조정
- 허용: Domain, Port 의존
- 금지: Infrastructure 직접 의존

### Infrastructure (infrastructure/)
- 목적: 기술 구현
- 허용: JPA, Repository 구현, Port 구현
- 책임: DB, Cache, 외부 API, 메시징

### Interfaces (api/, admin/, worker/)
- 목적: 외부 진입점
- 허용: Controller, DTO, Use Case 호출
- 금지: 비즈니스 로직

## 파일 생성 핵심 원칙 (AI 개발 시)

1. 하나의 UseCase = 하나의 파일
2. 하나의 파일 = 하나의 execute() 메서드만
3. 작은 파일 = AI가 이해하기 쉬움

## 빠른 체크리스트

- [ ] Domain에 @Entity, @Table 등 JPA 어노테이션 없는가?
- [ ] Domain Service에 Repository 의존성 없는가?
- [ ] UseCase가 Port(인터페이스)만 의존하는가?
- [ ] UseCase별로 파일이 분리되어 있는가? (하나의 파일 = 하나의 execute())
- [ ] 트랜잭션이 Repository Adapter에 있는가? (@Transactional)
- [ ] 여러 Aggregate 수정 시 TransactionTemplate 사용했는가?
- [ ] Controller에 비즈니스 로직이 없는가?

## 상세 규칙 문서

더 상세한 규칙은 다음 파일들을 참고하세요:
- Domain Layer: 02-domain.md
- Application Layer: 03-application.md
- Infrastructure Layer: 04-infrastructure.md
- Interfaces Layer: 05-interfaces.md
- Validation: 06-validation.md
  </artifact>

---
# 프로젝트 개요

## 기술 스택
- Java 25
- Spring Boot 4.0.0-M3
- Spring Data JPA
- QueryDSL
- MySQL
- Kafka
- Gradle (Multi-Module)

## 목표
- 일 30만건 이상 주문 처리
- 명확한 레이어 분리
- AI가 이해하고 수정하기 쉬운 구조

## 모듈 구조

```
order-service/
├── core/                   # 비즈니스 로직 (Spring 의존성 없음)
│   ├── domain/            # Domain Entity, Value Object, Domain Service
│   └── application/       # Use Case, Port, Command/Query, Support
├── infrastructure/         # 기술 구현
│   └── storage/
│       ├── db/            # PostgreSQL (JPA)
│       └── cache/         # Redis
├── api/                    # 고객용 API
│   ├── web/              # HTTP API
│   └── grpc/             # gRPC API
├── admin/                  # 관리자용 API
│   └── web/
└── worker/                 # 배치/스케줄러
    └── job/
```

## 의존성 방향 (중요!)

허용: api/admin/worker → infrastructure → core

금지: core → infrastructure (절대 안 됨!)

## 레이어별 책임

### Domain (core/domain/)
- 목적: 순수 비즈니스 규칙
- 허용: Java, Lombok만
- 금지: JPA, Spring, Repository, @Transactional

### Application (core/application/)
- 목적: Use Case 실행, 흐름 조정
- 허용: Domain, Port 의존
- 금지: Infrastructure 직접 의존

### Infrastructure (infrastructure/)
- 목적: 기술 구현
- 허용: JPA, Repository 구현, Port 구현
- 책임: DB, Cache, 외부 API, 메시징

### Interfaces (api/, admin/, worker/)
- 목적: 외부 진입점
- 허용: Controller, DTO, Use Case 호출
- 금지: 비즈니스 로직

## 파일 생성 핵심 원칙 (AI 개발 시)

1. 하나의 UseCase = 하나의 파일
2. 하나의 파일 = 하나의 execute() 메서드만
3. 작은 파일 = AI가 이해하기 쉬움

## 빠른 체크리스트

- [ ] Domain에 @Entity, @Table 등 JPA 어노테이션 없는가?
- [ ] Domain Service에 Repository 의존성 없는가?
- [ ] UseCase가 Port(인터페이스)만 의존하는가?
- [ ] UseCase별로 파일이 분리되어 있는가? (하나의 파일 = 하나의 execute())
- [ ] 트랜잭션이 Repository Adapter에 있는가? (@Transactional)
- [ ] 여러 Aggregate 수정 시 TransactionTemplate 사용했는가?
- [ ] Controller에 비즈니스 로직이 없는가?

## 상세 규칙 문서

더 상세한 규칙은 다음 파일들을 참고하세요:
- Domain Layer: 02-domain.md
- Application Layer: 03-application.md
- Infrastructure Layer: 04-infrastructure.md
- Interfaces Layer: 05-interfaces.md
- Validation: 06-validation.md
  </artifact>

---
